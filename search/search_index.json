{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Python wrapper to inteact with m2v industrial IoT platform from Eurogard.</p>"},{"location":"#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.12+</li> <li>Programmatic access to the Eurogard API</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>py2mv is available as a Python package and can be installed via pip or uv.</p>"},{"location":"#via-pip","title":"Via pip","text":"<ol> <li>Create a virtual environment: <code>python3 -m venv .venv</code></li> <li>Activate the virtual environment: <code>source .venv/bin/active</code></li> <li>Install pym2v via pip: <code>pip install pym2v</code></li> </ol>"},{"location":"#via-uv","title":"Via uv","text":"<ol> <li>Install pym2v via uv: <code>uv add pym2v</code></li> </ol>"},{"location":"#configuration","title":"Configuration","text":"<p>To authenticate with the Eurogard API, you need to provide the following credentials:</p> <ul> <li>Username</li> <li>Password</li> <li>Client ID</li> <li>Client Secret</li> </ul> <p>You can do this either by using an <code>.env</code> file (recommended) or by setting environment variables directly.</p>"},{"location":"#using-an-env-file","title":"Using an .env file","text":"<p>Rename the <code>.env.example</code> at the root of the project to <code>.env</code>, and replace the placeholder values with your actual credentials.</p> <pre><code>EUROGARD_BASEURL=https://eurogard.cloud\nEUROGARD_USERNAME=your_username_here\nEUROGARD_PASSWORD=your_password_here\nEUROGARD_CLIENT_ID=your_client_id_here\nEUROGARD_CLIENT_SECRET=your_client_secret_here\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>Import the <code>EuroGardAPI</code> object and create an instance of it</p> <pre><code>from pym2v.api import EurogardAPI\n\n\napi = EurogardAPI()\n</code></pre> <p>Retrieve a list of machines</p> <pre><code>machines = api.get_machines()\n</code></pre> <p>Get the UUID of the machine your are interested in</p> <pre><code>MACHINE_NAME = \"1337Machine\"\n\nmachine_uuid = api.get_machine_uuid(MACHINE_NAME, machines)\n</code></pre> <p>Get the names of measurements for which you like to pull data</p> <pre><code>result = api.get_machine_measurements(machine_uuid)\n</code></pre> <p>Turn the data returned by the API into a DataFrame for easier handling</p> <pre><code>measurements_df = pd.DataFrame.from_dict(result[\"entities\"])\n</code></pre> <p>Get actual data</p> <pre><code>START_DATE = \"2025-01-01\"\nEND_DATE = \"2025-01-13\"\nINTERVAL = \"60s\"\nMAX_FRAME_LENGTH = \"30D\"\n\ndata_df = api.get_long_frame_from_names(\n    machine_uuid=machine_uuid,\n    names=measurements_df.name.to_list(),\n    start=START_DATE,\n    end=END_DATE,\n    interval=INTERVAL,\n    max_frame_length=MAX_FRAME_LENGTH,\n)\n</code></pre>"},{"location":"references/","title":"References","text":""},{"location":"references/#api","title":"API","text":"<p>Pythonic interface to interact with the Eurogard backend services.</p> <p>EurogardAPI is the main class for interacting with the Eurogard m2v IoT platform.</p> <p>If settings are not provided, they will be loaded from environment variables or a .env file.</p> <p>Parameters:</p> Name Type Description Default <code>settings</code> <code>Settings</code> <p>An instance of the Settings class containing API configuration. Defaults to None.</p> <code>None</code>"},{"location":"references/#pym2v.api.EurogardAPI.create_session","title":"create_session","text":"<pre><code>create_session()\n</code></pre> <p>Create an OAuth2 session for API communication.</p> <p>Returns:</p> Name Type Description <code>OAuth2Session</code> <code>OAuth2Session</code> <p>An authenticated OAuth2 session.</p>"},{"location":"references/#pym2v.api.EurogardAPI.get_frame_from_names","title":"get_frame_from_names","text":"<pre><code>get_frame_from_names(machine_uuid, names, start, end, interval)\n</code></pre> <p>Retrieve a DataFrame of historical data for a specific machine.</p> <p>Parameters:</p> Name Type Description Default <code>machine_uuid</code> <code>str</code> <p>Machine UUID.</p> required <code>names</code> <code>list[str]</code> <p>List of data definition key item names.</p> required <code>start</code> <code>TsInput</code> <p>Start timestamp.</p> required <code>end</code> <code>TsInput</code> <p>End timestamp.</p> required <code>interval</code> <code>IntInput</code> <p>Interval.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: DataFrame of historical data.</p> Example <p>api = EurogardAPI() df = api.get_frame_from_names(\"machine-uuid\", [\"item1\", \"item2\"], \"2021-06-01\", \"2021-06-02\", \"1H\") print(df)</p>"},{"location":"references/#pym2v.api.EurogardAPI.get_historical_data","title":"get_historical_data","text":"<pre><code>get_historical_data(machine_uuid, data_definition_key_item_names, start, end, interval_in_s)\n</code></pre> <p>Retrieve historical data for a specific machine.</p> <p>Parameters:</p> Name Type Description Default <code>machine_uuid</code> <code>str</code> <p>Machine UUID.</p> required <code>data_definition_key_item_names</code> <code>list[str]</code> <p>List of data definition key item names.</p> required <code>start</code> <code>int</code> <p>Start timestamp in milliseconds.</p> required <code>end</code> <code>int</code> <p>End timestamp in milliseconds.</p> required <code>interval_in_s</code> <code>int</code> <p>Interval in seconds.</p> required <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: Historical data.</p> Example <p>api = EurogardAPI() data = api.get_historical_data(\"machine-uuid\", [\"item1\", \"item2\"], 1622547800, 1622634200, 60) print(data)</p>"},{"location":"references/#pym2v.api.EurogardAPI.get_long_frame_from_names","title":"get_long_frame_from_names","text":"<pre><code>get_long_frame_from_names(machine_uuid, names, start, end, interval, max_frame_length, show_progress=False)\n</code></pre> <p>Retrieve a long DataFrame of historical data for a specific machine.</p> <p>Parameters:</p> Name Type Description Default <code>machine_uuid</code> <code>str</code> <p>Machine UUID.</p> required <code>names</code> <code>list[str]</code> <p>List of data definition key item names.</p> required <code>start</code> <code>TsInput</code> <p>Start timestamp.</p> required <code>end</code> <code>TsInput</code> <p>End timestamp.</p> required <code>interval</code> <code>IntInput</code> <p>Time interval in which the sensor data is returned (equi distant).</p> required <code>max_frame_length</code> <code>IntInput</code> <p>Maximum interval length for a single API request.</p> required <code>show_progress</code> <code>bool</code> <p>Whether to show progress. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: Long DataFrame of historical data.</p> Example <p>api = EurogardAPI() df = api.get_long_frame_from_names( ...     \"machine-uuid\", [\"item1\", \"item2\"], \"2021-06-01\", \"2021-06-02\", \"1H\", \"30D\" ... ) print(df)</p>"},{"location":"references/#pym2v.api.EurogardAPI.get_machine_measurements","title":"get_machine_measurements","text":"<pre><code>get_machine_measurements(machine_uuid, page=0, size=10, sort='updatedAt', order='desc', filter='__archived:false')\n</code></pre> <p>Retrieve measurements for a specific machine.</p> <p>Parameters:</p> Name Type Description Default <code>machine_uuid</code> <code>str</code> <p>Machine UUID.</p> required <code>page</code> <code>int</code> <p>Page number, starting from 0. Defaults to 0.</p> <code>0</code> <code>size</code> <code>int</code> <p>Number of items per page. Defaults to 10.</p> <code>10</code> <code>sort</code> <code>str</code> <p>Sort field (e.g., updatedAt). Defaults to \"updatedAt\".</p> <code>'updatedAt'</code> <code>order</code> <code>str</code> <p>Sort order (asc or desc). Defaults to \"desc\".</p> <code>'desc'</code> <code>filter</code> <code>str</code> <p>Filter criteria (e.g., __archived:false). Defaults to \"__archived:false\".</p> <code>'__archived:false'</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: Machine measurements.</p> Example <p>api = EurogardAPI() measurements = api.get_machine_measurements(\"machine-uuid\") print(measurements)</p>"},{"location":"references/#pym2v.api.EurogardAPI.get_machine_setpoints","title":"get_machine_setpoints","text":"<pre><code>get_machine_setpoints(machine_uuid, page=0, size=10, sort='updatedAt', order='desc', filter='__archived:false')\n</code></pre> <p>Retrieve setpoints for a specific machine.</p> <p>Parameters:</p> Name Type Description Default <code>machine_uuid</code> <code>str</code> <p>Machine UUID.</p> required <code>page</code> <code>int</code> <p>Page number, starting from 0. Defaults to 0.</p> <code>0</code> <code>size</code> <code>int</code> <p>Number of items per page. Defaults to 10.</p> <code>10</code> <code>sort</code> <code>str</code> <p>Sort field (e.g., updatedAt). Defaults to \"updatedAt\".</p> <code>'updatedAt'</code> <code>order</code> <code>str</code> <p>Sort order (asc or desc). Defaults to \"desc\".</p> <code>'desc'</code> <code>filter</code> <code>str</code> <p>Filter criteria (e.g., __archived:false). Defaults to \"__archived:false\".</p> <code>'__archived:false'</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: Machine setpoints.</p> Example <p>api = EurogardAPI() setpoints = api.get_machine_setpoints(\"machine-uuid\") print(setpoints)</p>"},{"location":"references/#pym2v.api.EurogardAPI.get_machine_uuid","title":"get_machine_uuid  <code>staticmethod</code>","text":"<pre><code>get_machine_uuid(machine_name, machines)\n</code></pre> <p>Get the machine UUID matching the specified name from a list of machines.</p> <p>Parameters:</p> Name Type Description Default <code>machine_name</code> <code>str</code> <p>The name of the machine to search for.</p> required <code>machines</code> <code>dict[str, Any]</code> <p>A dictionary containing machine data with an 'entities' key      that holds a list of machine objects. Each machine object      should have 'name' and 'uuid' fields.</p> required <p>Returns:</p> Type Description <code>str | None</code> <p>str | None: UUID for machine that match the given name.     Returns None if no matches are found.</p>"},{"location":"references/#pym2v.api.EurogardAPI.get_machines","title":"get_machines","text":"<pre><code>get_machines(page=0, size=10, sort='name', order='asc', filter='__archived:false')\n</code></pre> <p>Retrieve a list of machines.</p> <p>Parameters:</p> Name Type Description Default <code>page</code> <code>int</code> <p>Page number, starting from 0. Defaults to 0.</p> <code>0</code> <code>size</code> <code>int</code> <p>Number of items per page. Defaults to 10.</p> <code>10</code> <code>sort</code> <code>str</code> <p>Sort field (e.g., name, companyName, thingName, machineTypeDefinitionName, lastConnection). Defaults to \"name\".</p> <code>'name'</code> <code>order</code> <code>str</code> <p>Sort order (asc or desc). Defaults to \"asc\".</p> <code>'asc'</code> <code>filter</code> <code>str</code> <p>Filter criteria (e.g., __archived:false). Defaults to \"__archived:false\".</p> <code>'__archived:false'</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: List of machines.</p> Example <p>api = EurogardAPI() machines = api.get_machines() print(machines)</p>"},{"location":"references/#pym2v.api.EurogardAPI.get_routers","title":"get_routers","text":"<pre><code>get_routers(page=0, size=10, sort='name', order='asc', filter='__archived:false')\n</code></pre> <p>Retrieve a list of routers.</p> <p>Parameters:</p> Name Type Description Default <code>page</code> <code>int</code> <p>Page number, starting from 0. Defaults to 0.</p> <code>0</code> <code>size</code> <code>int</code> <p>Number of items per page. Defaults to 10.</p> <code>10</code> <code>sort</code> <code>str</code> <p>Sort field (e.g., name, companyName, online, locationName). Defaults to \"name\".</p> <code>'name'</code> <code>order</code> <code>str</code> <p>Sort order (asc or desc). Defaults to \"asc\".</p> <code>'asc'</code> <code>filter</code> <code>str</code> <p>Filter criteria (e.g., __archived:false). Defaults to \"__archived:false\".</p> <code>'__archived:false'</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: List of routers.</p> Example <p>api = EurogardAPI() routers = api.get_routers() print(routers)</p>"},{"location":"references/#pym2v.api.EurogardAPI.get_user_info","title":"get_user_info","text":"<pre><code>get_user_info()\n</code></pre> <p>Retrieve user information.</p> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: User information.</p> Example <p>api = EurogardAPI() user_info = api.get_user_info() print(user_info)</p>"}]}