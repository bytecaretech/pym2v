Dokument: eurogard cloud - Schnittstellenbeschreibung 

 

Anz. Seiten: 17 

Ersteller: eurogard GmbH, Oliver Kosmann 

 


Inhaltsverzeichnis 

1) Änderungshistorie .......................................................................................................................... 3 
2) Autorisierung .................................................................................................................................. 3 
2.1) Access Token anfragen 3 
2.1.1) Request 3 
2.1.2) Response 3 
3) Vereinfachtes Datenmodel ............................................................................................................. 4 
4) Schnittstellenbeschreibung ........................................................................................................... 4 
4.1) Eigene Benutzerinformationen anfragen 4 
4.1.1) Request 4 
4.1.2) Response 5 
4.2) Router anfragen 5 
4.2.1) Request 6 
4.2.2) Response 6 
4.3) Maschinen anfragen 7 
4.3.1) Request 7 
4.3.2) Response 7 
4.3.3) Maschinen eines Routers anfragen 9 
4.3.3.1) Request 9 
4.3.3.2) Response 9 
4.3.4) Messwerte für eine Maschine anfragen 9 
4.3.4.1) Request 10 
4.3.4.2) Response 10 
4.3.5) Steuerwerte für eine Maschine anfragen 13 
4.3.5.1) Request 14 
4.3.5.2) Response 14 
4.3.6) Steuerwerte senden 14 
4.3.6.1) Request 14 
4.4) Verbindung zum Live-Daten MQTT Broker 15 
4.4.1) MQTT Benutzerdaten anfragen 15 
4.4.1.1) Request 15 
4.4.1.2) Response 15 
4.4.2) Zum MQTT Broker verbinden 15 
4.4.2.1) Live Daten empfangen 15 
4.4.2.2) Steuerwerte senden 16 
4.5) Historische Daten für eine Maschine anfragen 16 
4.5.1) Request 16 
4.5.2) Response 17 



1) ÄNDERUNGSHISTORIE 

Version 

Änderungen 

Gültig ab 

V1 

Ursprungsversion 

07.03.22 

V2 

Neue URL für die Autorisierung 

Verbindung zum Live-Daten MQTT Broker 

16.03.22 

V3 

Ergänzung Payload-Erklärung in live-data 

23.03.22 

V4 

Historische Daten für eine Maschine anfragen 

23.02.24 



 

2) AUTORISIERUNG 

Die Autorisierung gegenüber der m2v erfolgt über OAuth2 über den „Password grant type“. Der 
Zugriffstoken (Access Token) muss angefragt werden und in den folgenden Request im Header 
mitgegeben werden (Authorization: Bearer $ACCES_TOKEN). Der Access Token hat eine Gültigkeit von 
120 Minuten. Ist dieser abgelaufen, kann über den Refresh Token ein neuer Access Token angefragt 
werden. Der Refresh Token hat eine Gültigkeit von 24 Stunden. 

2.1) Access Token anfragen 

2.1.1) Request 

• Im Request Body müssen der Benutzername und das Passwort mitgegeben werden. 
• Der Access Token hat eine Gültigkeit von 120 Minuten. Wenn diese abgelaufen sind, kann über 
den Refresh Token ein neuer Access Token angefragt werden. 


URL 

auth/realms/iiot-platform/protocol/openid-connect/token 

http Method 

POST 

http Body 

grant_type=password&username=$username&password=$password& 
client_id=backend&client_secret=$secret 

http Header 

Content-Type: application/x-www-form-urlencoded 



 

2.1.2) Response 

{ 

 "access_token": "$ACCESS_TOKEN", 

 "expires_in": 7200, 

 "refresh_expires_in": 86400, 


 "refresh_token": "$REFRESH_TOKEN", 

 "token_type": "Bearer", 

 "not-before-policy": 1646860019, 

 "session_state": "$SESSION_STATE", 

 "scope": "email profile" 

} 

3) VEREINFACHTES DATENMODEL 

 

4) SCHNITTSTELLENBESCHREIBUNG 

Als Content-Type für den Request und auch für den Response wird immer JSON genutzt. Wie bereits im 
Kapitel Autorisierung beschrieben muss bei jedem Request der Access Token im Header mitgegeben 
werden. Die vollständige API kann unter https://api.eurogard.cloud/swagger-ui-custom.html eingesehen 
und getestet werden. 

4.1) Eigene Benutzerinformationen anfragen 

Link zur API: 
https://api.eurogard.cloud/swagger-ui/index.html?configUrl=/v3/api-docs/swagger-config#/user-
controller/user-controller-meGUI 

4.1.1) Request 

URL 

/backend/user-controller/meGUI 




http Method 

GET 

http Header 

"Content-Type: application/json", "Authorization: Bearer 
$ACCES_TOKEN 



4.1.2) Response 

{ 

 "username": "string", 

 "lastname": "string", 

 "firstname": "string", 

 "company": "string", 

 "companyUuid": "3fa85f64-5717-4562-b3fc-2c963f66afa6", 

 "userInfoUuid": "3fa85f64-5717-4562-b3fc-2c963f66afa6", 

 "lastConnection": "2021-01-12T13:31:26.961Z", 

 "receiveMessages": true, 

 "street": "string", 

 "zip": "string", 

 "city": "string", 

 "country": "string", 

 "phone": "string", 

 "comment": "string", 

 "admin": true, 

 "uuid": "3fa85f64-5717-4562-b3fc-2c963f66afa6" 

} 

4.2) Router anfragen 

Link zur API: 
https://api.eurogard.cloud/swagger-ui/index.html?configUrl=/v3/api-docs/swagger-config#/thing-gui-
controller/thing-gui-controller-getByFilter 

Dieser Request beinhaltet Paging und auch Filterfunktionalitäten. Die Parameter sind Pflichtfelder. 

• WICHTIG: beim Parameter filter können verschieden Filter im Stil key:value;key1:value1 
mitgegeben werden 
o : als Trenner zwischen key und value 
o ; als Trenner zwischen den verschiedenen Filtern 
o Der Filter muss immer den key __archived:false beinhalten 






4.2.1) Request 

URL 

/backend/thing-gui-controller/filter 

http Method 

GET 

http Header 

"Content-Type: application/json", "Authorization: Bearer 
$ACCES_TOKEN 

Parameter 

• page (beginnt bei 0) 
• size 
• sort – name, companyName, online, locationName 
• order – desc, asc 
• filter - __archived, companyName, locationName,type, uuid, 
online, name, accessKey, macAddress 




4.2.2) Response 

{ 

 "maxCount": 1, 

 "size": 5, 

 "page": 0, 

 "entities": [ 

 { 

 "deletedAt": 0, 

 "uuid": "3fa85f64-5717-4562-b3fc-2c963f66afa6", 

 "accessKey": "string", 

 "macAddress": "string", 

 "name": "string", 

 "type": "0", 

 "lastConnection": 0, 

 "companyUuid": "3fa85f64-5717-4562-b3fc-2c963f66afa6", 

 "companyName": "string", 

 "filename": "string", 

 "locationUuid": "3fa85f64-5717-4562-b3fc-2c963f66afa6", 

 "locationName": "string", 

 "online": true, 

 "archived": true, 

 "__updatedBy": "string", 


 "__updatedAt": 0, 

 "__removedAt": 0, 

 "__archived": true 

 } 

 ], 

 "additionalInformation": "string" 

} 

4.3) Maschinen anfragen 

Link zur API: 
https://api.eurogard.cloud/swagger-ui/index.html?configUrl=/v3/api-docs/swagger-config#/machine-gui-
controller/machine-gui-controller-getByFilter 

Dieser Request beinhaltet Paging und auch Filterfunktionalitäten. Die Parameter sind Pflichtfelder. 

• WICHTIG: beim Parameter filter können verschieden Filter im Stil key:value;key1:value1 
mitgegeben werden 
o : als Trenner zwischen key und value 
o ; als Trenner zwischen den verschiedenen Filtern 
o Der Filter muss immer den key __archived:false beinhalten 





4.3.1) Request 

URL 

/backend/machine-gui-controller/filter 

http Method 

GET 

http Header 

"Content-Type: application/json", "Authorization: Bearer 
$ACCES_TOKEN 

Parameter 

• page (beginnt bei 0) 
• size 
• sort – name, companyName, thingName, 
machineTypeDefinitionName, lastConnection 
• order – desc, asc 
• filter - __archived, thingName, name, 
machineTypeDefinitionName, companyName 




 

4.3.2) Response 

{ 


 "maxCount": 0, 

 "size": 0, 

 "page": 0, 

 "entities": [ 

 { 

 "deletedAt": 0, 

 "uuid": "3fa85f64-5717-4562-b3fc-2c963f66afa6", 

 "name": "string", 

 "thingUuid": "3fa85f64-5717-4562-b3fc-2c963f66afa6", 

 "machineTypeDefinitionUuid": "3fa85f64-5717-4562-b3fc-2c963f66afa6", 

 "companyUuid": "3fa85f64-5717-4562-b3fc-2c963f66afa6", 

 "companyName": "string", 

 "machineTypeDefinitionName": "string", 

 "thing": { 

 "deletedAt": 0, 

 "uuid": "3fa85f64-5717-4562-b3fc-2c963f66afa6", 

 "accessKey": "string", 

 "macAddress": "string", 

 "name": "string", 

 "type": "0", 

 "lastConnection": 0, 

 "companyUuid": "3fa85f64-5717-4562-b3fc-2c963f66afa6", 

 "companyName": "string", 

 "filename": "string", 

 "locationUuid": "3fa85f64-5717-4562-b3fc-2c963f66afa6", 

 "locationName": "string", 

 "online": true 

 }, 

 "thingName": "string", 

 "machineConnectionMappings": [ 

 { 

 "uuid": "3fa85f64-5717-4562-b3fc-2c963f66afa6", 

 "connectionId": 0, 

 "connection": { 


 "uuid": "3fa85f64-5717-4562-b3fc-2c963f66afa6", 

 "label": "string", 

 "ip": "string", 

 "port": 0, 

 "timeout": 0, 

 "cycletime": 0, 

 "cycletimeNow": 0 

 }, 

 "connectionType": "0" 

 } 

 ], 

 "lastConnection": 0 

 } 

 ], 

 "additionalInformation": "string" 

} 

4.3.3) Maschinen eines Routers anfragen 

4.3.3.1) Request 

Den Request aufbauen wie in 4.3.1) Request. Zusätzlich muss beim filter noch thingUuid:$UUID 
hinzugefügt werden. 

4.3.3.2) Response 

Reponse wie in 4.3.2) Response 

4.3.4) Messwerte für eine Maschine anfragen 

Link zur API: https://api.eurogard.cloud/swagger-ui/index.html?configUrl=/v3/api-docs/swagger-
config#/machine-controller/machine-controller-getMeasurements 

Dieser Request beinhaltet Paging und auch Filterfunktionalitäten. Die Parameter sind Pflichtfelder. 

• WICHTIG: beim Parameter filter können verschieden Filter im Stil key:value;key1:value1 
mitgegeben werden 
o : als Trenner zwischen key und value 
o ; als Trenner zwischen den verschiedenen Filtern 
o Der Filter muss immer den key __archived:false beinhalten 






4.3.4.1) Request 

URL 

/backend/machine-controller/{uuid}/measurements 

http Method 

GET 

http Header 

"Content-Type: application/json", "Authorization: Bearer 
$ACCES_TOKEN 

Parameter 

• page (beginnt bei 0) 
• size 
• sort – updatedAt 
• order – desc, asc 
• filter - __archived, name 




 

4.3.4.2) Response 

{ 

 "additionalInformation": "string", 

 "entities": [ 

 { 

 "__archived": true, 

 "__removedAt": 0, 

 "__updatedAt": 0, 

 "__updatedBy": "string", 

 "archived": true, 

 "connection": { 

 "dataType": "0" 

 }, 

 "connectionType": "0", 

 "dataDefinitionKeyItem": { 

 "dataDefinitionKeyItemUuid": "string", 

 "dataDefinitionType": "0", 

 "dataDefinitionUuid": "string", 

 "label": "string", 

 "lastTimestamp": 0, 

 "lastValue": "string", 

 "machineTypeDefinitionName": "string", 


 "machineTypeDefinitionUuid": "string", 

 "message": "string", 

 "name": "string", 

 "parentUuid": "string", 

 "texte": [ 

 { 

 "label": "string", 

 "language": "0", 

 "uuid": "string" 

 } 

 ], 

 "uuid": "string" 

 }, 

 "dataDefinitionType": "0", 

 "dataTrigger": { 

 "__archived": true, 

 "__removedAt": 0, 

 "__updatedAt": 0, 

 "__updatedBy": "string", 

 "archived": true, 

 "deletedAt": 0, 

 "name": "string", 

 "removedAt": 0, 

 "timeout": 0, 

 "triggerType": "0", 

 "updatedAt": 0, 

 "uuid": "string", 

 "value1": "string", 

 "value2": "string", 

 "value3": "string" 

 }, 

 "deletedAt": 0, 

 "destination": 0, 

 "machineTypeDefinitionName": "string", 


 "machineTypeDefinitionUuid": "string", 

 "name": "string", 

 "physicalUnit": { 

 "__archived": true, 

 "__removedAt": 0, 

 "__updatedAt": 0, 

 "__updatedBy": "string", 

 "archived": true, 

 "deletedAt": 0, 

 "removedAt": 0, 

 "symbol": "string", 

 "texte": [ 

 { 

 "__archived": true, 

 "__removedAt": 0, 

 "__updatedAt": 0, 

 "__updatedBy": "string", 

 "archived": true, 

 "deletedAt": 0, 

 "label": "string", 

 "language": "0", 

 "removedAt": 0, 

 "updatedAt": 0, 

 "uuid": "string" 

 } 

 ], 

 "updatedAt": 0, 

 "uuid": "string" 

 }, 

 "readLevel": 0, 

 "scaling": { 

 "__archived": true, 

 "__removedAt": 0, 

 "__updatedAt": 0, 


 "__updatedBy": "string", 

 "accuracy": 0, 

 "archived": true, 

 "deletedAt": 0, 

 "inputMax": 0, 

 "inputMin": 0, 

 "mode": "0", 

 "offset": 0, 

 "outputMax": 0, 

 "outputMin": 0, 

 "removedAt": 0, 

 "updatedAt": 0, 

 "uuid": "string" 

 }, 

 "share": true, 

 "uuid": "string", 

 "writeLevel": 0 

 } 

 ], 

 "maxCount": 10, 

 "page": 0, 

 "size": 5 

} 

4.3.5) Steuerwerte für eine Maschine anfragen 

Link zur API: 
https://api.eurogard.cloud/swagger-ui/index.html?configUrl=/v3/api-docs/swagger-config#/machine-
controller/machine-controller-getSetpoints 

Dieser Request beinhaltet Paging und auch Filterfunktionalitäten. Die Parameter sind Pflichtfelder. 

• WICHTIG: beim Parameter filter können verschieden Filter im Stil key:value;key1:value1 
mitgegeben werden 
o : als Trenner zwischen key und value 
o ; als Trenner zwischen den verschiedenen Filtern 
o Der Filter muss immer den key __archived:false beinhalten 






4.3.5.1) Request 

URL 

/backend/machine-controller/{uuid}/set-points 

http Method 

GET 

http Header 

"Content-Type: application/json", "Authorization: Bearer 
$ACCES_TOKEN 

Parameter 

• page (beginnt bei 0) 
• size 
• sort – updatedAt 
• order – desc, asc 
• filter - __archived, name 




 

4.3.5.2) Response 

Response wie in 4.3.4.2) Response 

4.3.6) Steuerwerte senden 

Link zur API: 
https://api.eurogard.cloud/swagger-ui/index.html?configUrl=/v3/api-docs/swagger-config#/data-definition-
key-item-controller/data-definition-key-item-controller-postSetPoint 

4.3.6.1) Request 

URL 

/backend/data-definition-key-item-controller/set-point 

http Method 

POST 

http Header 

"Content-Type: application/json", "Authorization: Bearer 
$ACCES_TOKEN 

Request Body 

{ 

 "dataDefinitionKeyItemUuid": "string", 

 "machineUuid": "string", 

 "setPointValue": "string", 

 "timestamp": 0 

} 



 


4.4) Verbindung zum Live-Daten MQTT Broker 

4.4.1) MQTT Benutzerdaten anfragen 

Link zur API: 
https://api.eurogard.cloud/swagger-ui/index.html?configUrl=/v3/api-docs/swagger-config#/mqtt-
controller/mqtt-controller-getUser 

4.4.1.1) Request 

URL 

/backend/mqtt-controller/user 

http Method 

GET 

http Header 

"Content-Type: application/json", "Authorization: Bearer 
$ACCES_TOKEN 



4.4.1.2) Response 

{ 

 "username": "$username", 

 "password": "$password" 

} 

4.4.2) Zum MQTT Broker verbinden 

Broker Adresse 

dev.eurogard.cloud 

Broker Port 

8884 

Client ID 

$username aus 4.4.1.2) Response 

Benutzername 

$username aus 4.4.1.2) Response 

Passwort 

$password aus 4.4.1.2) Response 



 

Zusätzlich muss SSL/ TLS aktiviert und “CA signed server certificate” ausgewählt werden. Wir nutzen 
QoS1. 

4.4.2.1) Live Daten empfangen 

Nach erfolgreichem Verbinden kann man sich auf folgendes Topic subscriben, um live Daten zu 
bekommen: machine/{machine-uuid}/live-data 

{ 

"m“ : “machine-uuid”, 

"t“ : “timestamp in ms”, 


"i" : “datenpunkt-uuid”, 

"v" : “value” 

} 

 

4.4.2.2) Steuerwerte senden 

Um einen Steuerwert über MQTT zu senden, muss folgender Request an das Topic 
machine/{machine-uuid}/setpoint gesendet werden: 

{ 

 "setPointValue": "{neuer Wert}", 

 "timestamp": {timestamp in ms}, 

 "machineUuid": "{machine-uuid}", 

 "dataDefinitionKeyItemUuid": "{datenpunkt-uuid}" 

} 

Den Response, bzw. die Antwort auf den Steuerwertrequest kann über das Topic 

machine/{machine-uuid}/ack empfangen werden. 

Returncodes {value.state} im ack-Paket: 

100: alles erfolgreich 

101: Wert geschrieben, konnte nicht rückgelesen werden 

-101: Fehler nicht Steuerbare Variable oder Konfiguration ungültig 

-102: Fehler Zeitbereich ungültig 

-103: Setpoint empfangen, noch nicht verarbeitet --> Fehler 

 

4.5) Historische Daten für eine Maschine anfragen 

Link zur API: 

https://api.eurogard.cloud/swagger-ui/index.html?configUrl=/v3/api-docs/swagger-config#/machine-
controller/getDataByTimeRangeAndInterval 

Zuerst muss eine Liste von dataDefinitionKeyItemName zusammengestellt werden (s. 4.3.4) Messwerte 
für eine Maschine anfragen), die nachher im Request Body mitgeschickt werden. 

4.5.1) Request 

URL 

/machine-controller/postDataByRangeAndInterval 




http Method 

POST 

http Header 

"Content-Type: application/json", "Authorization: Bearer 
$ACCES_TOKEN 

Request Body 

{ 

 "condition": "string" 

 "values": [ 

 "string" // full dataDefinitionKeyItemName 

 ], 

 "start": 0, 

 "end": 0, 

 "machine": "string", 

 "machineUuid": "3fa85f64-5717-4562-b3fc-2c963f66afa6", 

 "intervalInS": 0 

} 



4.5.2) Response 

{ 

 "results": [ 

 { 

 "dataDefinitionKeyItemUuid": "3fa85f64-5717-4562-b3fc-2c963f66afa6", 

 "dataDefinitionKeyItemName": "string", 

 "machineUuid": "3fa85f64-5717-4562-b3fc-2c963f66afa6", 

 "machineName": "string", 

 "min": 0, 

 "max": 0, 

 "values": [ 

 { 

 "timestamp": 0, 

 "value": 0 

 } 

 ] 

 } 

 ], 


 "min": 0, 

 "max": 0 

} 


